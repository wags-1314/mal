----------------------------------------------
Testing test^python.3^step1; step file: , test file: tests/step1_read_print.mal
Running: env STEP=step1_read_print MAL_IMPL=js ../runtest.py  --deferrable --optional   ../tests/step1_read_print.mal -- ../python.3/run
Testing read of numbers
TEST: '1' -> ['',1] -> FAIL (line 3):
    Expected : '1\r\n1'
    Got      : "1\r\ntokens ['1']\r\n1"
TEST: '7' -> ['',7] -> FAIL (line 5):
    Expected : '7\r\n7'
    Got      : "7\r\ntokens ['7']\r\n7"
TEST: '  7   ' -> ['',7] -> FAIL (line 7):
    Expected : '\\ \\ 7\\ \\ \\ \r\n7'
    Got      : "  7   \r\ntokens ['7']\r\n7"
TEST: '-123' -> ['',-123] -> FAIL (line 9):
    Expected : '\\-123\r\n\\-123'
    Got      : "-123\r\ntokens ['-123']\r\n-123"
Testing read of symbols
TEST: '+' -> ['',+] -> FAIL (line 14):
    Expected : '\\+\r\n\\+'
    Got      : "+\r\ntokens ['+']\r\n+"
TEST: 'abc' -> ['',abc] -> FAIL (line 16):
    Expected : 'abc\r\nabc'
    Got      : "abc\r\ntokens ['abc']\r\nabc"
TEST: '   abc   ' -> ['',abc] -> FAIL (line 18):
    Expected : '\\ \\ \\ abc\\ \\ \\ \r\nabc'
    Got      : "   abc   \r\ntokens ['abc']\r\nabc"
TEST: 'abc5' -> ['',abc5] -> FAIL (line 20):
    Expected : 'abc5\r\nabc5'
    Got      : "abc5\r\ntokens ['abc5']\r\nabc5"
TEST: 'abc-def' -> ['',abc-def] -> FAIL (line 22):
    Expected : 'abc\\-def\r\nabc\\-def'
    Got      : "abc-def\r\ntokens ['abc-def']\r\nabc-def"
Testing non-numbers starting with a dash.
TEST: '-' -> ['',-] -> FAIL (line 26):
    Expected : '\\-\r\n\\-'
    Got      : "-\r\ntokens ['-']\r\n-"
TEST: '-abc' -> ['',-abc] -> FAIL (line 28):
    Expected : '\\-abc\r\n\\-abc'
    Got      : "-abc\r\ntokens ['-abc']\r\n-abc"
TEST: '->>' -> ['',->>] -> FAIL (line 30):
    Expected : '\\-\\>\\>\r\n\\-\\>\\>'
    Got      : "->>\r\ntokens ['->>']\r\n->>"
Testing read of lists
TEST: '(+ 1 2)' -> ['',(+ 1 2)] -> FAIL (line 34):
    Expected : '\\(\\+\\ 1\\ 2\\)\r\n\\(\\+\\ 1\\ 2\\)'
    Got      : "(+ 1 2)\r\ntokens ['(', '+', '1', '2', ')']\r\n(+ 1 2)"
TEST: '()' -> ['',()] -> FAIL (line 36):
    Expected : '\\(\\)\r\n\\(\\)'
    Got      : "()\r\ntokens ['(', ')']\r\n()"
TEST: '( )' -> ['',()] -> FAIL (line 38):
    Expected : '\\(\\ \\)\r\n\\(\\)'
    Got      : "( )\r\ntokens ['(', ')']\r\n()"
TEST: '(nil)' -> ['',(nil)] -> FAIL (line 40):
    Expected : '\\(nil\\)\r\n\\(nil\\)'
    Got      : "(nil)\r\ntokens ['(', 'nil', ')']\r\n(nil)"
TEST: '((3 4))' -> ['',((3 4))] -> FAIL (line 42):
    Expected : '\\(\\(3\\ 4\\)\\)\r\n\\(\\(3\\ 4\\)\\)'
    Got      : "((3 4))\r\ntokens ['(', '(', '3', '4', ')', ')']\r\n((3 4))"
TEST: '(+ 1 (+ 2 3))' -> ['',(+ 1 (+ 2 3))] -> FAIL (line 44):
    Expected : '\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)\r\n\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)'
    Got      : "(+ 1 (+ 2 3))\r\ntokens ['(', '+', '1', '(', '+', '2', '3', ')', ')']\r\n(+ 1 (+ 2 3))"
TEST: '  ( +   1   (+   2 3   )   )  ' -> ['',(+ 1 (+ 2 3))] -> FAIL (line 46):
    Expected : '\\ \\ \\(\\ \\+\\ \\ \\ 1\\ \\ \\ \\(\\+\\ \\ \\ 2\\ 3\\ \\ \\ \\)\\ \\ \\ \\)\\ \\ \r\n\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)'
    Got      : "  ( +   1   (+   2 3   )   )  \r\ntokens ['(', '+', '1', '(', '+', '2', '3', ')', ')']\r\n(+ 1 (+ 2 3))"
TEST: '(* 1 2)' -> ['',(* 1 2)] -> FAIL (line 48):
    Expected : '\\(\\*\\ 1\\ 2\\)\r\n\\(\\*\\ 1\\ 2\\)'
    Got      : "(* 1 2)\r\ntokens ['(', '*', '1', '2', ')']\r\n(* 1 2)"
TEST: '(** 1 2)' -> ['',(** 1 2)] -> FAIL (line 50):
    Expected : '\\(\\*\\*\\ 1\\ 2\\)\r\n\\(\\*\\*\\ 1\\ 2\\)'
    Got      : "(** 1 2)\r\ntokens ['(', '**', '1', '2', ')']\r\n(** 1 2)"
TEST: '(* -3 6)' -> ['',(* -3 6)] -> FAIL (line 52):
    Expected : '\\(\\*\\ \\-3\\ 6\\)\r\n\\(\\*\\ \\-3\\ 6\\)'
    Got      : "(* -3 6)\r\ntokens ['(', '*', '-3', '6', ')']\r\n(* -3 6)"
TEST: '(()())' -> ['',(() ())] -> FAIL (line 54):
    Expected : '\\(\\(\\)\\(\\)\\)\r\n\\(\\(\\)\\ \\(\\)\\)'
    Got      : "(()())\r\ntokens ['(', '(', ')', '(', ')', ')']\r\n(() ())"
Test commas as whitespace
TEST: '(1 2, 3,,,,),,' -> ['',(1 2 3)] -> FAIL (line 58):
    Expected : '\\(1\\ 2\\,\\ 3\\,\\,\\,\\,\\)\\,\\,\r\n\\(1\\ 2\\ 3\\)'
    Got      : "(1 2, 3,,,,),,\r\ntokens ['(', '1', '2', '3', ')']\r\n(1 2 3)"

-------- Deferrable Functionality --------
Testing read of nil/true/false
TEST: 'nil' -> ['',nil] -> FAIL (line 68):
    Expected : 'nil\r\nnil'
    Got      : "nil\r\ntokens ['nil']\r\nnil"
TEST: 'true' -> ['',true] -> FAIL (line 70):
    Expected : 'true\r\ntrue'
    Got      : "true\r\ntokens ['true']\r\ntrue"
TEST: 'false' -> ['',false] -> FAIL (line 72):
    Expected : 'false\r\nfalse'
    Got      : "false\r\ntokens ['false']\r\nfalse"
Testing read of strings
TEST: '"abc"' -> ['',"abc"] -> FAIL (line 76):
    Expected : '\\"abc\\"\r\n\\"abc\\"'
    Got      : '"abc"\r\ntokens [\'"abc"\']\r\n"abc"'
TEST: '   "abc"   ' -> ['',"abc"] -> FAIL (line 78):
    Expected : '\\ \\ \\ \\"abc\\"\\ \\ \\ \r\n\\"abc\\"'
    Got      : '   "abc"   \r\ntokens [\'"abc"\']\r\n"abc"'
TEST: '"abc (with parens)"' -> ['',"abc (with parens)"] -> FAIL (line 80):
    Expected : '\\"abc\\ \\(with\\ parens\\)\\"\r\n\\"abc\\ \\(with\\ parens\\)\\"'
    Got      : '"abc (with parens)"\r\ntokens [\'"abc (with parens)"\']\r\n"abc (with parens)"'
TEST: '"abc\\"def"' -> ['',"abc\"def"] -> FAIL (line 82):
    Expected : '\\"abc\\\\\\"def\\"\r\n\\"abc\\\\\\"def\\"'
    Got      : '"abc\\"def"\r\ntokens [\'"abc\\\\"def"\']\r\n"abc\\"def"'
TEST: '""' -> ['',""] -> FAIL (line 84):
    Expected : '\\"\\"\r\n\\"\\"'
    Got      : '""\r\ntokens [\'""\']\r\n""'
TEST: '"\\\\"' -> ['',"\\"] -> FAIL (line 86):
    Expected : '\\"\\\\\\\\\\"\r\n\\"\\\\\\\\\\"'
    Got      : '"\\\\"\r\ntokens [\'"\\\\\\\\"\']\r\n"\\\\"'
TEST: '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' -> ['',"\\\\\\\\\\\\\\\\\\"] -> FAIL (line 88):
    Expected : '\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\ntokens [\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\r\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
TEST: '"&"' -> ['',"&"] -> FAIL (line 90):
    Expected : '\\"\\&\\"\r\n\\"\\&\\"'
    Got      : '"&"\r\ntokens [\'"&"\']\r\n"&"'
TEST: '"\'"' -> ['',"'"] -> FAIL (line 92):
    Expected : '\\"\\\'\\"\r\n\\"\\\'\\"'
    Got      : '"\'"\r\ntokens [\'"\\\'"\']\r\n"\'"'
TEST: '"("' -> ['',"("] -> FAIL (line 94):
    Expected : '\\"\\(\\"\r\n\\"\\(\\"'
    Got      : '"("\r\ntokens [\'"("\']\r\n"("'
TEST: '")"' -> ['',")"] -> FAIL (line 96):
    Expected : '\\"\\)\\"\r\n\\"\\)\\"'
    Got      : '")"\r\ntokens [\'")"\']\r\n")"'
TEST: '"*"' -> ['',"*"] -> FAIL (line 98):
    Expected : '\\"\\*\\"\r\n\\"\\*\\"'
    Got      : '"*"\r\ntokens [\'"*"\']\r\n"*"'
TEST: '"+"' -> ['',"+"] -> FAIL (line 100):
    Expected : '\\"\\+\\"\r\n\\"\\+\\"'
    Got      : '"+"\r\ntokens [\'"+"\']\r\n"+"'
TEST: '","' -> ['',","] -> FAIL (line 102):
    Expected : '\\"\\,\\"\r\n\\"\\,\\"'
    Got      : '","\r\ntokens [\'","\']\r\n","'
TEST: '"-"' -> ['',"-"] -> FAIL (line 104):
    Expected : '\\"\\-\\"\r\n\\"\\-\\"'
    Got      : '"-"\r\ntokens [\'"-"\']\r\n"-"'
TEST: '"/"' -> ['',"/"] -> FAIL (line 106):
    Expected : '\\"\\/\\"\r\n\\"\\/\\"'
    Got      : '"/"\r\ntokens [\'"/"\']\r\n"/"'
TEST: '":"' -> ['',":"] -> FAIL (line 108):
    Expected : '\\"\\:\\"\r\n\\"\\:\\"'
    Got      : '":"\r\ntokens [\'":"\']\r\n":"'
TEST: '";"' -> ['',";"] -> FAIL (line 110):
    Expected : '\\"\\;\\"\r\n\\"\\;\\"'
    Got      : '";"\r\ntokens [\'";"\']\r\n";"'
TEST: '"<"' -> ['',"<"] -> FAIL (line 112):
    Expected : '\\"\\<\\"\r\n\\"\\<\\"'
    Got      : '"<"\r\ntokens [\'"<"\']\r\n"<"'
TEST: '"="' -> ['',"="] -> FAIL (line 114):
    Expected : '\\"\\=\\"\r\n\\"\\=\\"'
    Got      : '"="\r\ntokens [\'"="\']\r\n"="'
TEST: '">"' -> ['',">"] -> FAIL (line 116):
    Expected : '\\"\\>\\"\r\n\\"\\>\\"'
    Got      : '">"\r\ntokens [\'">"\']\r\n">"'
TEST: '"?"' -> ['',"?"] -> FAIL (line 118):
    Expected : '\\"\\?\\"\r\n\\"\\?\\"'
    Got      : '"?"\r\ntokens [\'"?"\']\r\n"?"'
TEST: '"@"' -> ['',"@"] -> FAIL (line 120):
    Expected : '\\"\\@\\"\r\n\\"\\@\\"'
    Got      : '"@"\r\ntokens [\'"@"\']\r\n"@"'
TEST: '"["' -> ['',"["] -> FAIL (line 122):
    Expected : '\\"\\[\\"\r\n\\"\\[\\"'
    Got      : '"["\r\ntokens [\'"["\']\r\n"["'
TEST: '"]"' -> ['',"]"] -> FAIL (line 124):
    Expected : '\\"\\]\\"\r\n\\"\\]\\"'
    Got      : '"]"\r\ntokens [\'"]"\']\r\n"]"'
TEST: '"^"' -> ['',"^"] -> FAIL (line 126):
    Expected : '\\"\\^\\"\r\n\\"\\^\\"'
    Got      : '"^"\r\ntokens [\'"^"\']\r\n"^"'
TEST: '"_"' -> ['',"_"] -> FAIL (line 128):
    Expected : '\\"\\_\\"\r\n\\"\\_\\"'
    Got      : '"_"\r\ntokens [\'"_"\']\r\n"_"'
TEST: '"`"' -> ['',"`"] -> FAIL (line 130):
    Expected : '\\"\\`\\"\r\n\\"\\`\\"'
    Got      : '"`"\r\ntokens [\'"`"\']\r\n"`"'
TEST: '"{"' -> ['',"{"] -> FAIL (line 132):
    Expected : '\\"\\{\\"\r\n\\"\\{\\"'
    Got      : '"{"\r\ntokens [\'"{"\']\r\n"{"'
TEST: '"}"' -> ['',"}"] -> FAIL (line 134):
    Expected : '\\"\\}\\"\r\n\\"\\}\\"'
    Got      : '"}"\r\ntokens [\'"}"\']\r\n"}"'
TEST: '"~"' -> ['',"~"] -> FAIL (line 136):
    Expected : '\\"\\~\\"\r\n\\"\\~\\"'
    Got      : '"~"\r\ntokens [\'"~"\']\r\n"~"'
Testing reader errors
TEST: '(1 2' -> ['.*(EOF|end of input|unbalanced).*',] -> SUCCESS
TEST: '[1 2' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 142):
    Expected : '\\[1\\ 2\r\n.*(EOF|end of input|unbalanced).*'
    Got      : "[1 2\r\ntokens ['[', '1', '2']\r\n["
TEST: '"abc' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 146):
    Expected : '\\"abc\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"abc\r\ntokens [\'"abc\']\r\n"abc'
TEST: '"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 148):
    Expected : '\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\r\ntokens [\'"\']\r\n"'
TEST: '"\\"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 150):
    Expected : '\\"\\\\\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\"\r\ntokens [\'"\\\\"\']\r\n"\\"'
TEST: '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 152):
    Expected : '\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\ntokens [\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\r\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
TEST: '(1 "abc' -> ['.*(EOF|end of input|unbalanced).*',] -> SUCCESS
TEST: '(1 "abc"' -> ['.*(EOF|end of input|unbalanced).*',] -> SUCCESS
Testing read of quoting
TEST: "'1" -> ['',(quote 1)] -> FAIL (line 160):
    Expected : "\\'1\r\n\\(quote\\ 1\\)"
    Got      : '\'1\r\ntokens ["\'", \'1\']\r\n\''
TEST: "'(1 2 3)" -> ['',(quote (1 2 3))] -> FAIL (line 162):
    Expected : "\\'\\(1\\ 2\\ 3\\)\r\n\\(quote\\ \\(1\\ 2\\ 3\\)\\)"
    Got      : '\'(1 2 3)\r\ntokens ["\'", \'(\', \'1\', \'2\', \'3\', \')\']\r\n\''
TEST: '`1' -> ['',(quasiquote 1)] -> FAIL (line 164):
    Expected : '\\`1\r\n\\(quasiquote\\ 1\\)'
    Got      : "`1\r\ntokens ['`', '1']\r\n`"
TEST: '`(1 2 3)' -> ['',(quasiquote (1 2 3))] -> FAIL (line 166):
    Expected : '\\`\\(1\\ 2\\ 3\\)\r\n\\(quasiquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "`(1 2 3)\r\ntokens ['`', '(', '1', '2', '3', ')']\r\n`"
TEST: '~1' -> ['',(unquote 1)] -> FAIL (line 168):
    Expected : '\\~1\r\n\\(unquote\\ 1\\)'
    Got      : "~1\r\ntokens ['~', '1']\r\n~"
TEST: '~(1 2 3)' -> ['',(unquote (1 2 3))] -> FAIL (line 170):
    Expected : '\\~\\(1\\ 2\\ 3\\)\r\n\\(unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~(1 2 3)\r\ntokens ['~', '(', '1', '2', '3', ')']\r\n~"
TEST: '`(1 ~a 3)' -> ['',(quasiquote (1 (unquote a) 3))] -> FAIL (line 172):
    Expected : '\\`\\(1\\ \\~a\\ 3\\)\r\n\\(quasiquote\\ \\(1\\ \\(unquote\\ a\\)\\ 3\\)\\)'
    Got      : "`(1 ~a 3)\r\ntokens ['`', '(', '1', '~', 'a', '3', ')']\r\n`"
TEST: '~@(1 2 3)' -> ['',(splice-unquote (1 2 3))] -> FAIL (line 174):
    Expected : '\\~\\@\\(1\\ 2\\ 3\\)\r\n\\(splice\\-unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~@(1 2 3)\r\ntokens ['~@', '(', '1', '2', '3', ')']\r\n~@"
Testing keywords
TEST: ':kw' -> ['',:kw] -> FAIL (line 179):
    Expected : '\\:kw\r\n\\:kw'
    Got      : ":kw\r\ntokens [':kw']\r\n:kw"
TEST: '(:kw1 :kw2 :kw3)' -> ['',(:kw1 :kw2 :kw3)] -> FAIL (line 181):
    Expected : '\\(\\:kw1\\ \\:kw2\\ \\:kw3\\)\r\n\\(\\:kw1\\ \\:kw2\\ \\:kw3\\)'
    Got      : "(:kw1 :kw2 :kw3)\r\ntokens ['(', ':kw1', ':kw2', ':kw3', ')']\r\n(:kw1 :kw2 :kw3)"
Testing read of vectors
TEST: '[+ 1 2]' -> ['',[+ 1 2]] -> FAIL (line 185):
    Expected : '\\[\\+\\ 1\\ 2\\]\r\n\\[\\+\\ 1\\ 2\\]'
    Got      : "[+ 1 2]\r\ntokens ['[', '+', '1', '2', ']']\r\n["
TEST: '[]' -> ['',[]] -> FAIL (line 187):
    Expected : '\\[\\]\r\n\\[\\]'
    Got      : "[]\r\ntokens ['[', ']']\r\n["
TEST: '[ ]' -> ['',[]] -> FAIL (line 189):
    Expected : '\\[\\ \\]\r\n\\[\\]'
    Got      : "[ ]\r\ntokens ['[', ']']\r\n["
TEST: '[[3 4]]' -> ['',[[3 4]]] -> FAIL (line 191):
    Expected : '\\[\\[3\\ 4\\]\\]\r\n\\[\\[3\\ 4\\]\\]'
    Got      : "[[3 4]]\r\ntokens ['[', '[', '3', '4', ']', ']']\r\n["
TEST: '[+ 1 [+ 2 3]]' -> ['',[+ 1 [+ 2 3]]] -> FAIL (line 193):
    Expected : '\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]\r\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "[+ 1 [+ 2 3]]\r\ntokens ['[', '+', '1', '[', '+', '2', '3', ']', ']']\r\n["
TEST: '  [ +   1   [+   2 3   ]   ]  ' -> ['',[+ 1 [+ 2 3]]] -> FAIL (line 195):
    Expected : '\\ \\ \\[\\ \\+\\ \\ \\ 1\\ \\ \\ \\[\\+\\ \\ \\ 2\\ 3\\ \\ \\ \\]\\ \\ \\ \\]\\ \\ \r\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "  [ +   1   [+   2 3   ]   ]  \r\ntokens ['[', '+', '1', '[', '+', '2', '3', ']', ']']\r\n["
TEST: '([])' -> ['',([])] -> FAIL (line 197):
    Expected : '\\(\\[\\]\\)\r\n\\(\\[\\]\\)'
    Got      : "([])\r\ntokens ['(', '[', ']', ')']\r\n([ ])"
Testing read of hash maps
TEST: '{}' -> ['',{}] -> FAIL (line 201):
    Expected : '\\{\\}\r\n\\{\\}'
    Got      : "{}\r\ntokens ['{', '}']\r\n{"
TEST: '{ }' -> ['',{}] -> FAIL (line 203):
    Expected : '\\{\\ \\}\r\n\\{\\}'
    Got      : "{ }\r\ntokens ['{', '}']\r\n{"
TEST: '{"abc" 1}' -> ['',{"abc" 1}] -> FAIL (line 205):
    Expected : '\\{\\"abc\\"\\ 1\\}\r\n\\{\\"abc\\"\\ 1\\}'
    Got      : '{"abc" 1}\r\ntokens [\'{\', \'"abc"\', \'1\', \'}\']\r\n{'
TEST: '{"a" {"b" 2}}' -> ['',{"a" {"b" 2}}] -> FAIL (line 207):
    Expected : '\\{\\"a\\"\\ \\{\\"b\\"\\ 2\\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ 2\\}\\}'
    Got      : '{"a" {"b" 2}}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'2\', \'}\', \'}\']\r\n{'
TEST: '{"a" {"b" {"c" 3}}}' -> ['',{"a" {"b" {"c" 3}}}] -> FAIL (line 209):
    Expected : '\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"c\\"\\ 3\\}\\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"c\\"\\ 3\\}\\}\\}'
    Got      : '{"a" {"b" {"c" 3}}}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"c"\', \'3\', \'}\', \'}\', \'}\']\r\n{'
TEST: '{  "a"  {"b"   {  "cde"     3   }  }}' -> ['',{"a" {"b" {"cde" 3}}}] -> FAIL (line 211):
    Expected : '\\{\\ \\ \\"a\\"\\ \\ \\{\\"b\\"\\ \\ \\ \\{\\ \\ \\"cde\\"\\ \\ \\ \\ \\ 3\\ \\ \\ \\}\\ \\ \\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"cde\\"\\ 3\\}\\}\\}'
    Got      : '{  "a"  {"b"   {  "cde"     3   }  }}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"cde"\', \'3\', \'}\', \'}\', \'}\']\r\n{'
TEST: '{"a1" 1 "a2" 2 "a3" 3}' -> ['{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}',] -> FAIL (line 215):
    Expected : '\\{\\"a1\\"\\ 1\\ \\"a2\\"\\ 2\\ \\"a3\\"\\ 3\\}\r\n{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}'
    Got      : '{"a1" 1 "a2" 2 "a3" 3}\r\ntokens [\'{\', \'"a1"\', \'1\', \'"a2"\', \'2\', \'"a3"\', \'3\', \'}\']\r\n{'
TEST: '{  :a  {:b   {  :cde     3   }  }}' -> ['',{:a {:b {:cde 3}}}] -> FAIL (line 217):
    Expected : '\\{\\ \\ \\:a\\ \\ \\{\\:b\\ \\ \\ \\{\\ \\ \\:cde\\ \\ \\ \\ \\ 3\\ \\ \\ \\}\\ \\ \\}\\}\r\n\\{\\:a\\ \\{\\:b\\ \\{\\:cde\\ 3\\}\\}\\}'
    Got      : "{  :a  {:b   {  :cde     3   }  }}\r\ntokens ['{', ':a', '{', ':b', '{', ':cde', '3', '}', '}', '}']\r\n{"
TEST: '{"1" 1}' -> ['',{"1" 1}] -> FAIL (line 219):
    Expected : '\\{\\"1\\"\\ 1\\}\r\n\\{\\"1\\"\\ 1\\}'
    Got      : '{"1" 1}\r\ntokens [\'{\', \'"1"\', \'1\', \'}\']\r\n{'
TEST: '({})' -> ['',({})] -> FAIL (line 221):
    Expected : '\\(\\{\\}\\)\r\n\\(\\{\\}\\)'
    Got      : "({})\r\ntokens ['(', '{', '}', ')']\r\n({ })"
Testing read of comments
TEST: ' ;; whole line comment (not an exception)' -> ['',] -> SUCCESS (result ignored)
TEST: '1 ; comment after expression' -> ['',1] -> FAIL (line 226):
    Expected : '1\\ \\;\\ comment\\ after\\ expression\r\n1'
    Got      : "1 ; comment after expression\r\ntokens ['1']\r\n1"
TEST: '1; comment after expression' -> ['',1] -> FAIL (line 228):
    Expected : '1\\;\\ comment\\ after\\ expression\r\n1'
    Got      : "1; comment after expression\r\ntokens ['1']\r\n1"
Testing read of @/deref
TEST: '@a' -> ['',(deref a)] -> FAIL (line 232):
    Expected : '\\@a\r\n\\(deref\\ a\\)'
    Got      : "@a\r\ntokens ['@', 'a']\r\n@"

-------- Optional Functionality --------
Testing read of ^/metadata
TEST: '^{"a" 1} [1 2 3]' -> ['',(with-meta [1 2 3] {"a" 1})] -> SOFT FAIL (line 241):
    Expected : '\\^\\{\\"a\\"\\ 1\\}\\ \\[1\\ 2\\ 3\\]\r\n\\(with\\-meta\\ \\[1\\ 2\\ 3\\]\\ \\{\\"a\\"\\ 1\\}\\)'
    Got      : '^{"a" 1} [1 2 3]\r\ntokens [\'^\', \'{\', \'"a"\', \'1\', \'}\', \'[\', \'1\', \'2\', \'3\', \']\']\r\n^'
Non alphanumerice characters in strings
TEST: '"\\n"' -> ['',"\n"] -> SOFT FAIL (line 247):
    Expected : '\\"\\\\n\\"\r\n\\"\\\\n\\"'
    Got      : '"\\n"\r\ntokens [\'"\\\\n"\']\r\n"\\n"'
TEST: '"#"' -> ['',"#"] -> SOFT FAIL (line 249):
    Expected : '\\"\\#\\"\r\n\\"\\#\\"'
    Got      : '"#"\r\ntokens [\'"#"\']\r\n"#"'
TEST: '"$"' -> ['',"$"] -> SOFT FAIL (line 251):
    Expected : '\\"\\$\\"\r\n\\"\\$\\"'
    Got      : '"$"\r\ntokens [\'"$"\']\r\n"$"'
TEST: '"%"' -> ['',"%"] -> SOFT FAIL (line 253):
    Expected : '\\"\\%\\"\r\n\\"\\%\\"'
    Got      : '"%"\r\ntokens [\'"%"\']\r\n"%"'
TEST: '"."' -> ['',"."] -> SOFT FAIL (line 255):
    Expected : '\\"\\.\\"\r\n\\"\\.\\"'
    Got      : '"."\r\ntokens [\'"."\']\r\n"."'
TEST: '"\\\\"' -> ['',"\\"] -> SOFT FAIL (line 257):
    Expected : '\\"\\\\\\\\\\"\r\n\\"\\\\\\\\\\"'
    Got      : '"\\\\"\r\ntokens [\'"\\\\\\\\"\']\r\n"\\\\"'
TEST: '"|"' -> ['',"|"] -> SOFT FAIL (line 259):
    Expected : '\\"\\|\\"\r\n\\"\\|\\"'
    Got      : '"|"\r\ntokens [\'"|"\']\r\n"|"'
Non alphanumeric characters in comments
TEST: '1;!' -> ['',1] -> SOFT FAIL (line 263):
    Expected : '1\\;\\!\r\n1'
    Got      : "1;!\r\ntokens ['1']\r\n1"
TEST: '1;"' -> ['',1] -> SOFT FAIL (line 265):
    Expected : '1\\;\\"\r\n1'
    Got      : '1;"\r\ntokens [\'1\']\r\n1'
TEST: '1;#' -> ['',1] -> SOFT FAIL (line 267):
    Expected : '1\\;\\#\r\n1'
    Got      : "1;#\r\ntokens ['1']\r\n1"
TEST: '1;$' -> ['',1] -> SOFT FAIL (line 269):
    Expected : '1\\;\\$\r\n1'
    Got      : "1;$\r\ntokens ['1']\r\n1"
TEST: '1;%' -> ['',1] -> SOFT FAIL (line 271):
    Expected : '1\\;\\%\r\n1'
    Got      : "1;%\r\ntokens ['1']\r\n1"
TEST: "1;'" -> ['',1] -> SOFT FAIL (line 273):
    Expected : "1\\;\\'\r\n1"
    Got      : "1;'\r\ntokens ['1']\r\n1"
TEST: '1;\\' -> ['',1] -> SOFT FAIL (line 275):
    Expected : '1\\;\\\\\r\n1'
    Got      : "1;\\\r\ntokens ['1']\r\n1"
TEST: '1;\\\\' -> ['',1] -> SOFT FAIL (line 277):
    Expected : '1\\;\\\\\\\\\r\n1'
    Got      : "1;\\\\\r\ntokens ['1']\r\n1"
TEST: '1;\\\\\\' -> ['',1] -> SOFT FAIL (line 279):
    Expected : '1\\;\\\\\\\\\\\\\r\n1'
    Got      : "1;\\\\\\\r\ntokens ['1']\r\n1"
TEST: '1;`' -> ['',1] -> SOFT FAIL (line 281):
    Expected : '1\\;\\`\r\n1'
    Got      : "1;`\r\ntokens ['1']\r\n1"
TEST: '1; &()*+,-./:;<=>?@[]^_{|}~' -> ['',] -> SUCCESS (result ignored)
FIXME: These tests have no reasons to be optional, but...
fantom fails this one
TEST: '"!"' -> ['',"!"] -> SOFT FAIL (line 288):
    Expected : '\\"\\!\\"\r\n\\"\\!\\"'
    Got      : '"!"\r\ntokens [\'"!"\']\r\n"!"'

FAILURES:
FAILED TEST (line 3): 1 -> ['',1]:
    Expected : '1\r\n1'
    Got      : "1\r\ntokens ['1']\r\n1"
FAILED TEST (line 5): 7 -> ['',7]:
    Expected : '7\r\n7'
    Got      : "7\r\ntokens ['7']\r\n7"
FAILED TEST (line 7):   7    -> ['',7]:
    Expected : '\\ \\ 7\\ \\ \\ \r\n7'
    Got      : "  7   \r\ntokens ['7']\r\n7"
FAILED TEST (line 9): -123 -> ['',-123]:
    Expected : '\\-123\r\n\\-123'
    Got      : "-123\r\ntokens ['-123']\r\n-123"
FAILED TEST (line 14): + -> ['',+]:
    Expected : '\\+\r\n\\+'
    Got      : "+\r\ntokens ['+']\r\n+"
FAILED TEST (line 16): abc -> ['',abc]:
    Expected : 'abc\r\nabc'
    Got      : "abc\r\ntokens ['abc']\r\nabc"
FAILED TEST (line 18):    abc    -> ['',abc]:
    Expected : '\\ \\ \\ abc\\ \\ \\ \r\nabc'
    Got      : "   abc   \r\ntokens ['abc']\r\nabc"
FAILED TEST (line 20): abc5 -> ['',abc5]:
    Expected : 'abc5\r\nabc5'
    Got      : "abc5\r\ntokens ['abc5']\r\nabc5"
FAILED TEST (line 22): abc-def -> ['',abc-def]:
    Expected : 'abc\\-def\r\nabc\\-def'
    Got      : "abc-def\r\ntokens ['abc-def']\r\nabc-def"
FAILED TEST (line 26): - -> ['',-]:
    Expected : '\\-\r\n\\-'
    Got      : "-\r\ntokens ['-']\r\n-"
FAILED TEST (line 28): -abc -> ['',-abc]:
    Expected : '\\-abc\r\n\\-abc'
    Got      : "-abc\r\ntokens ['-abc']\r\n-abc"
FAILED TEST (line 30): ->> -> ['',->>]:
    Expected : '\\-\\>\\>\r\n\\-\\>\\>'
    Got      : "->>\r\ntokens ['->>']\r\n->>"
FAILED TEST (line 34): (+ 1 2) -> ['',(+ 1 2)]:
    Expected : '\\(\\+\\ 1\\ 2\\)\r\n\\(\\+\\ 1\\ 2\\)'
    Got      : "(+ 1 2)\r\ntokens ['(', '+', '1', '2', ')']\r\n(+ 1 2)"
FAILED TEST (line 36): () -> ['',()]:
    Expected : '\\(\\)\r\n\\(\\)'
    Got      : "()\r\ntokens ['(', ')']\r\n()"
FAILED TEST (line 38): ( ) -> ['',()]:
    Expected : '\\(\\ \\)\r\n\\(\\)'
    Got      : "( )\r\ntokens ['(', ')']\r\n()"
FAILED TEST (line 40): (nil) -> ['',(nil)]:
    Expected : '\\(nil\\)\r\n\\(nil\\)'
    Got      : "(nil)\r\ntokens ['(', 'nil', ')']\r\n(nil)"
FAILED TEST (line 42): ((3 4)) -> ['',((3 4))]:
    Expected : '\\(\\(3\\ 4\\)\\)\r\n\\(\\(3\\ 4\\)\\)'
    Got      : "((3 4))\r\ntokens ['(', '(', '3', '4', ')', ')']\r\n((3 4))"
FAILED TEST (line 44): (+ 1 (+ 2 3)) -> ['',(+ 1 (+ 2 3))]:
    Expected : '\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)\r\n\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)'
    Got      : "(+ 1 (+ 2 3))\r\ntokens ['(', '+', '1', '(', '+', '2', '3', ')', ')']\r\n(+ 1 (+ 2 3))"
FAILED TEST (line 46):   ( +   1   (+   2 3   )   )   -> ['',(+ 1 (+ 2 3))]:
    Expected : '\\ \\ \\(\\ \\+\\ \\ \\ 1\\ \\ \\ \\(\\+\\ \\ \\ 2\\ 3\\ \\ \\ \\)\\ \\ \\ \\)\\ \\ \r\n\\(\\+\\ 1\\ \\(\\+\\ 2\\ 3\\)\\)'
    Got      : "  ( +   1   (+   2 3   )   )  \r\ntokens ['(', '+', '1', '(', '+', '2', '3', ')', ')']\r\n(+ 1 (+ 2 3))"
FAILED TEST (line 48): (* 1 2) -> ['',(* 1 2)]:
    Expected : '\\(\\*\\ 1\\ 2\\)\r\n\\(\\*\\ 1\\ 2\\)'
    Got      : "(* 1 2)\r\ntokens ['(', '*', '1', '2', ')']\r\n(* 1 2)"
FAILED TEST (line 50): (** 1 2) -> ['',(** 1 2)]:
    Expected : '\\(\\*\\*\\ 1\\ 2\\)\r\n\\(\\*\\*\\ 1\\ 2\\)'
    Got      : "(** 1 2)\r\ntokens ['(', '**', '1', '2', ')']\r\n(** 1 2)"
FAILED TEST (line 52): (* -3 6) -> ['',(* -3 6)]:
    Expected : '\\(\\*\\ \\-3\\ 6\\)\r\n\\(\\*\\ \\-3\\ 6\\)'
    Got      : "(* -3 6)\r\ntokens ['(', '*', '-3', '6', ')']\r\n(* -3 6)"
FAILED TEST (line 54): (()()) -> ['',(() ())]:
    Expected : '\\(\\(\\)\\(\\)\\)\r\n\\(\\(\\)\\ \\(\\)\\)'
    Got      : "(()())\r\ntokens ['(', '(', ')', '(', ')', ')']\r\n(() ())"
FAILED TEST (line 58): (1 2, 3,,,,),, -> ['',(1 2 3)]:
    Expected : '\\(1\\ 2\\,\\ 3\\,\\,\\,\\,\\)\\,\\,\r\n\\(1\\ 2\\ 3\\)'
    Got      : "(1 2, 3,,,,),,\r\ntokens ['(', '1', '2', '3', ')']\r\n(1 2 3)"
FAILED TEST (line 68): nil -> ['',nil]:
    Expected : 'nil\r\nnil'
    Got      : "nil\r\ntokens ['nil']\r\nnil"
FAILED TEST (line 70): true -> ['',true]:
    Expected : 'true\r\ntrue'
    Got      : "true\r\ntokens ['true']\r\ntrue"
FAILED TEST (line 72): false -> ['',false]:
    Expected : 'false\r\nfalse'
    Got      : "false\r\ntokens ['false']\r\nfalse"
FAILED TEST (line 76): "abc" -> ['',"abc"]:
    Expected : '\\"abc\\"\r\n\\"abc\\"'
    Got      : '"abc"\r\ntokens [\'"abc"\']\r\n"abc"'
FAILED TEST (line 78):    "abc"    -> ['',"abc"]:
    Expected : '\\ \\ \\ \\"abc\\"\\ \\ \\ \r\n\\"abc\\"'
    Got      : '   "abc"   \r\ntokens [\'"abc"\']\r\n"abc"'
FAILED TEST (line 80): "abc (with parens)" -> ['',"abc (with parens)"]:
    Expected : '\\"abc\\ \\(with\\ parens\\)\\"\r\n\\"abc\\ \\(with\\ parens\\)\\"'
    Got      : '"abc (with parens)"\r\ntokens [\'"abc (with parens)"\']\r\n"abc (with parens)"'
FAILED TEST (line 82): "abc\"def" -> ['',"abc\"def"]:
    Expected : '\\"abc\\\\\\"def\\"\r\n\\"abc\\\\\\"def\\"'
    Got      : '"abc\\"def"\r\ntokens [\'"abc\\\\"def"\']\r\n"abc\\"def"'
FAILED TEST (line 84): "" -> ['',""]:
    Expected : '\\"\\"\r\n\\"\\"'
    Got      : '""\r\ntokens [\'""\']\r\n""'
FAILED TEST (line 86): "\\" -> ['',"\\"]:
    Expected : '\\"\\\\\\\\\\"\r\n\\"\\\\\\\\\\"'
    Got      : '"\\\\"\r\ntokens [\'"\\\\\\\\"\']\r\n"\\\\"'
FAILED TEST (line 88): "\\\\\\\\\\\\\\\\\\" -> ['',"\\\\\\\\\\\\\\\\\\"]:
    Expected : '\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\ntokens [\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\r\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
FAILED TEST (line 90): "&" -> ['',"&"]:
    Expected : '\\"\\&\\"\r\n\\"\\&\\"'
    Got      : '"&"\r\ntokens [\'"&"\']\r\n"&"'
FAILED TEST (line 92): "'" -> ['',"'"]:
    Expected : '\\"\\\'\\"\r\n\\"\\\'\\"'
    Got      : '"\'"\r\ntokens [\'"\\\'"\']\r\n"\'"'
FAILED TEST (line 94): "(" -> ['',"("]:
    Expected : '\\"\\(\\"\r\n\\"\\(\\"'
    Got      : '"("\r\ntokens [\'"("\']\r\n"("'
FAILED TEST (line 96): ")" -> ['',")"]:
    Expected : '\\"\\)\\"\r\n\\"\\)\\"'
    Got      : '")"\r\ntokens [\'")"\']\r\n")"'
FAILED TEST (line 98): "*" -> ['',"*"]:
    Expected : '\\"\\*\\"\r\n\\"\\*\\"'
    Got      : '"*"\r\ntokens [\'"*"\']\r\n"*"'
FAILED TEST (line 100): "+" -> ['',"+"]:
    Expected : '\\"\\+\\"\r\n\\"\\+\\"'
    Got      : '"+"\r\ntokens [\'"+"\']\r\n"+"'
FAILED TEST (line 102): "," -> ['',","]:
    Expected : '\\"\\,\\"\r\n\\"\\,\\"'
    Got      : '","\r\ntokens [\'","\']\r\n","'
FAILED TEST (line 104): "-" -> ['',"-"]:
    Expected : '\\"\\-\\"\r\n\\"\\-\\"'
    Got      : '"-"\r\ntokens [\'"-"\']\r\n"-"'
FAILED TEST (line 106): "/" -> ['',"/"]:
    Expected : '\\"\\/\\"\r\n\\"\\/\\"'
    Got      : '"/"\r\ntokens [\'"/"\']\r\n"/"'
FAILED TEST (line 108): ":" -> ['',":"]:
    Expected : '\\"\\:\\"\r\n\\"\\:\\"'
    Got      : '":"\r\ntokens [\'":"\']\r\n":"'
FAILED TEST (line 110): ";" -> ['',";"]:
    Expected : '\\"\\;\\"\r\n\\"\\;\\"'
    Got      : '";"\r\ntokens [\'";"\']\r\n";"'
FAILED TEST (line 112): "<" -> ['',"<"]:
    Expected : '\\"\\<\\"\r\n\\"\\<\\"'
    Got      : '"<"\r\ntokens [\'"<"\']\r\n"<"'
FAILED TEST (line 114): "=" -> ['',"="]:
    Expected : '\\"\\=\\"\r\n\\"\\=\\"'
    Got      : '"="\r\ntokens [\'"="\']\r\n"="'
FAILED TEST (line 116): ">" -> ['',">"]:
    Expected : '\\"\\>\\"\r\n\\"\\>\\"'
    Got      : '">"\r\ntokens [\'">"\']\r\n">"'
FAILED TEST (line 118): "?" -> ['',"?"]:
    Expected : '\\"\\?\\"\r\n\\"\\?\\"'
    Got      : '"?"\r\ntokens [\'"?"\']\r\n"?"'
FAILED TEST (line 120): "@" -> ['',"@"]:
    Expected : '\\"\\@\\"\r\n\\"\\@\\"'
    Got      : '"@"\r\ntokens [\'"@"\']\r\n"@"'
FAILED TEST (line 122): "[" -> ['',"["]:
    Expected : '\\"\\[\\"\r\n\\"\\[\\"'
    Got      : '"["\r\ntokens [\'"["\']\r\n"["'
FAILED TEST (line 124): "]" -> ['',"]"]:
    Expected : '\\"\\]\\"\r\n\\"\\]\\"'
    Got      : '"]"\r\ntokens [\'"]"\']\r\n"]"'
FAILED TEST (line 126): "^" -> ['',"^"]:
    Expected : '\\"\\^\\"\r\n\\"\\^\\"'
    Got      : '"^"\r\ntokens [\'"^"\']\r\n"^"'
FAILED TEST (line 128): "_" -> ['',"_"]:
    Expected : '\\"\\_\\"\r\n\\"\\_\\"'
    Got      : '"_"\r\ntokens [\'"_"\']\r\n"_"'
FAILED TEST (line 130): "`" -> ['',"`"]:
    Expected : '\\"\\`\\"\r\n\\"\\`\\"'
    Got      : '"`"\r\ntokens [\'"`"\']\r\n"`"'
FAILED TEST (line 132): "{" -> ['',"{"]:
    Expected : '\\"\\{\\"\r\n\\"\\{\\"'
    Got      : '"{"\r\ntokens [\'"{"\']\r\n"{"'
FAILED TEST (line 134): "}" -> ['',"}"]:
    Expected : '\\"\\}\\"\r\n\\"\\}\\"'
    Got      : '"}"\r\ntokens [\'"}"\']\r\n"}"'
FAILED TEST (line 136): "~" -> ['',"~"]:
    Expected : '\\"\\~\\"\r\n\\"\\~\\"'
    Got      : '"~"\r\ntokens [\'"~"\']\r\n"~"'
FAILED TEST (line 142): [1 2 -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '\\[1\\ 2\r\n.*(EOF|end of input|unbalanced).*'
    Got      : "[1 2\r\ntokens ['[', '1', '2']\r\n["
FAILED TEST (line 146): "abc -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '\\"abc\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"abc\r\ntokens [\'"abc\']\r\n"abc'
FAILED TEST (line 148): " -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\r\ntokens [\'"\']\r\n"'
FAILED TEST (line 150): "\" -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '\\"\\\\\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\"\r\ntokens [\'"\\\\"\']\r\n"\\"'
FAILED TEST (line 152): "\\\\\\\\\\\\\\\\\\\" -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\ntokens [\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\r\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
FAILED TEST (line 160): '1 -> ['',(quote 1)]:
    Expected : "\\'1\r\n\\(quote\\ 1\\)"
    Got      : '\'1\r\ntokens ["\'", \'1\']\r\n\''
FAILED TEST (line 162): '(1 2 3) -> ['',(quote (1 2 3))]:
    Expected : "\\'\\(1\\ 2\\ 3\\)\r\n\\(quote\\ \\(1\\ 2\\ 3\\)\\)"
    Got      : '\'(1 2 3)\r\ntokens ["\'", \'(\', \'1\', \'2\', \'3\', \')\']\r\n\''
FAILED TEST (line 164): `1 -> ['',(quasiquote 1)]:
    Expected : '\\`1\r\n\\(quasiquote\\ 1\\)'
    Got      : "`1\r\ntokens ['`', '1']\r\n`"
FAILED TEST (line 166): `(1 2 3) -> ['',(quasiquote (1 2 3))]:
    Expected : '\\`\\(1\\ 2\\ 3\\)\r\n\\(quasiquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "`(1 2 3)\r\ntokens ['`', '(', '1', '2', '3', ')']\r\n`"
FAILED TEST (line 168): ~1 -> ['',(unquote 1)]:
    Expected : '\\~1\r\n\\(unquote\\ 1\\)'
    Got      : "~1\r\ntokens ['~', '1']\r\n~"
FAILED TEST (line 170): ~(1 2 3) -> ['',(unquote (1 2 3))]:
    Expected : '\\~\\(1\\ 2\\ 3\\)\r\n\\(unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~(1 2 3)\r\ntokens ['~', '(', '1', '2', '3', ')']\r\n~"
FAILED TEST (line 172): `(1 ~a 3) -> ['',(quasiquote (1 (unquote a) 3))]:
    Expected : '\\`\\(1\\ \\~a\\ 3\\)\r\n\\(quasiquote\\ \\(1\\ \\(unquote\\ a\\)\\ 3\\)\\)'
    Got      : "`(1 ~a 3)\r\ntokens ['`', '(', '1', '~', 'a', '3', ')']\r\n`"
FAILED TEST (line 174): ~@(1 2 3) -> ['',(splice-unquote (1 2 3))]:
    Expected : '\\~\\@\\(1\\ 2\\ 3\\)\r\n\\(splice\\-unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~@(1 2 3)\r\ntokens ['~@', '(', '1', '2', '3', ')']\r\n~@"
FAILED TEST (line 179): :kw -> ['',:kw]:
    Expected : '\\:kw\r\n\\:kw'
    Got      : ":kw\r\ntokens [':kw']\r\n:kw"
FAILED TEST (line 181): (:kw1 :kw2 :kw3) -> ['',(:kw1 :kw2 :kw3)]:
    Expected : '\\(\\:kw1\\ \\:kw2\\ \\:kw3\\)\r\n\\(\\:kw1\\ \\:kw2\\ \\:kw3\\)'
    Got      : "(:kw1 :kw2 :kw3)\r\ntokens ['(', ':kw1', ':kw2', ':kw3', ')']\r\n(:kw1 :kw2 :kw3)"
FAILED TEST (line 185): [+ 1 2] -> ['',[+ 1 2]]:
    Expected : '\\[\\+\\ 1\\ 2\\]\r\n\\[\\+\\ 1\\ 2\\]'
    Got      : "[+ 1 2]\r\ntokens ['[', '+', '1', '2', ']']\r\n["
FAILED TEST (line 187): [] -> ['',[]]:
    Expected : '\\[\\]\r\n\\[\\]'
    Got      : "[]\r\ntokens ['[', ']']\r\n["
FAILED TEST (line 189): [ ] -> ['',[]]:
    Expected : '\\[\\ \\]\r\n\\[\\]'
    Got      : "[ ]\r\ntokens ['[', ']']\r\n["
FAILED TEST (line 191): [[3 4]] -> ['',[[3 4]]]:
    Expected : '\\[\\[3\\ 4\\]\\]\r\n\\[\\[3\\ 4\\]\\]'
    Got      : "[[3 4]]\r\ntokens ['[', '[', '3', '4', ']', ']']\r\n["
FAILED TEST (line 193): [+ 1 [+ 2 3]] -> ['',[+ 1 [+ 2 3]]]:
    Expected : '\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]\r\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "[+ 1 [+ 2 3]]\r\ntokens ['[', '+', '1', '[', '+', '2', '3', ']', ']']\r\n["
FAILED TEST (line 195):   [ +   1   [+   2 3   ]   ]   -> ['',[+ 1 [+ 2 3]]]:
    Expected : '\\ \\ \\[\\ \\+\\ \\ \\ 1\\ \\ \\ \\[\\+\\ \\ \\ 2\\ 3\\ \\ \\ \\]\\ \\ \\ \\]\\ \\ \r\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "  [ +   1   [+   2 3   ]   ]  \r\ntokens ['[', '+', '1', '[', '+', '2', '3', ']', ']']\r\n["
FAILED TEST (line 197): ([]) -> ['',([])]:
    Expected : '\\(\\[\\]\\)\r\n\\(\\[\\]\\)'
    Got      : "([])\r\ntokens ['(', '[', ']', ')']\r\n([ ])"
FAILED TEST (line 201): {} -> ['',{}]:
    Expected : '\\{\\}\r\n\\{\\}'
    Got      : "{}\r\ntokens ['{', '}']\r\n{"
FAILED TEST (line 203): { } -> ['',{}]:
    Expected : '\\{\\ \\}\r\n\\{\\}'
    Got      : "{ }\r\ntokens ['{', '}']\r\n{"
FAILED TEST (line 205): {"abc" 1} -> ['',{"abc" 1}]:
    Expected : '\\{\\"abc\\"\\ 1\\}\r\n\\{\\"abc\\"\\ 1\\}'
    Got      : '{"abc" 1}\r\ntokens [\'{\', \'"abc"\', \'1\', \'}\']\r\n{'
FAILED TEST (line 207): {"a" {"b" 2}} -> ['',{"a" {"b" 2}}]:
    Expected : '\\{\\"a\\"\\ \\{\\"b\\"\\ 2\\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ 2\\}\\}'
    Got      : '{"a" {"b" 2}}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'2\', \'}\', \'}\']\r\n{'
FAILED TEST (line 209): {"a" {"b" {"c" 3}}} -> ['',{"a" {"b" {"c" 3}}}]:
    Expected : '\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"c\\"\\ 3\\}\\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"c\\"\\ 3\\}\\}\\}'
    Got      : '{"a" {"b" {"c" 3}}}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"c"\', \'3\', \'}\', \'}\', \'}\']\r\n{'
FAILED TEST (line 211): {  "a"  {"b"   {  "cde"     3   }  }} -> ['',{"a" {"b" {"cde" 3}}}]:
    Expected : '\\{\\ \\ \\"a\\"\\ \\ \\{\\"b\\"\\ \\ \\ \\{\\ \\ \\"cde\\"\\ \\ \\ \\ \\ 3\\ \\ \\ \\}\\ \\ \\}\\}\r\n\\{\\"a\\"\\ \\{\\"b\\"\\ \\{\\"cde\\"\\ 3\\}\\}\\}'
    Got      : '{  "a"  {"b"   {  "cde"     3   }  }}\r\ntokens [\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"cde"\', \'3\', \'}\', \'}\', \'}\']\r\n{'
FAILED TEST (line 215): {"a1" 1 "a2" 2 "a3" 3} -> ['{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}',]:
    Expected : '\\{\\"a1\\"\\ 1\\ \\"a2\\"\\ 2\\ \\"a3\\"\\ 3\\}\r\n{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}'
    Got      : '{"a1" 1 "a2" 2 "a3" 3}\r\ntokens [\'{\', \'"a1"\', \'1\', \'"a2"\', \'2\', \'"a3"\', \'3\', \'}\']\r\n{'
FAILED TEST (line 217): {  :a  {:b   {  :cde     3   }  }} -> ['',{:a {:b {:cde 3}}}]:
    Expected : '\\{\\ \\ \\:a\\ \\ \\{\\:b\\ \\ \\ \\{\\ \\ \\:cde\\ \\ \\ \\ \\ 3\\ \\ \\ \\}\\ \\ \\}\\}\r\n\\{\\:a\\ \\{\\:b\\ \\{\\:cde\\ 3\\}\\}\\}'
    Got      : "{  :a  {:b   {  :cde     3   }  }}\r\ntokens ['{', ':a', '{', ':b', '{', ':cde', '3', '}', '}', '}']\r\n{"
FAILED TEST (line 219): {"1" 1} -> ['',{"1" 1}]:
    Expected : '\\{\\"1\\"\\ 1\\}\r\n\\{\\"1\\"\\ 1\\}'
    Got      : '{"1" 1}\r\ntokens [\'{\', \'"1"\', \'1\', \'}\']\r\n{'
FAILED TEST (line 221): ({}) -> ['',({})]:
    Expected : '\\(\\{\\}\\)\r\n\\(\\{\\}\\)'
    Got      : "({})\r\ntokens ['(', '{', '}', ')']\r\n({ })"
FAILED TEST (line 226): 1 ; comment after expression -> ['',1]:
    Expected : '1\\ \\;\\ comment\\ after\\ expression\r\n1'
    Got      : "1 ; comment after expression\r\ntokens ['1']\r\n1"
FAILED TEST (line 228): 1; comment after expression -> ['',1]:
    Expected : '1\\;\\ comment\\ after\\ expression\r\n1'
    Got      : "1; comment after expression\r\ntokens ['1']\r\n1"
FAILED TEST (line 232): @a -> ['',(deref a)]:
    Expected : '\\@a\r\n\\(deref\\ a\\)'
    Got      : "@a\r\ntokens ['@', 'a']\r\n@"
SOFT FAILED TEST (line 241): ^{"a" 1} [1 2 3] -> ['',(with-meta [1 2 3] {"a" 1})]:
    Expected : '\\^\\{\\"a\\"\\ 1\\}\\ \\[1\\ 2\\ 3\\]\r\n\\(with\\-meta\\ \\[1\\ 2\\ 3\\]\\ \\{\\"a\\"\\ 1\\}\\)'
    Got      : '^{"a" 1} [1 2 3]\r\ntokens [\'^\', \'{\', \'"a"\', \'1\', \'}\', \'[\', \'1\', \'2\', \'3\', \']\']\r\n^'
SOFT FAILED TEST (line 247): "\n" -> ['',"\n"]:
    Expected : '\\"\\\\n\\"\r\n\\"\\\\n\\"'
    Got      : '"\\n"\r\ntokens [\'"\\\\n"\']\r\n"\\n"'
SOFT FAILED TEST (line 249): "#" -> ['',"#"]:
    Expected : '\\"\\#\\"\r\n\\"\\#\\"'
    Got      : '"#"\r\ntokens [\'"#"\']\r\n"#"'
SOFT FAILED TEST (line 251): "$" -> ['',"$"]:
    Expected : '\\"\\$\\"\r\n\\"\\$\\"'
    Got      : '"$"\r\ntokens [\'"$"\']\r\n"$"'
SOFT FAILED TEST (line 253): "%" -> ['',"%"]:
    Expected : '\\"\\%\\"\r\n\\"\\%\\"'
    Got      : '"%"\r\ntokens [\'"%"\']\r\n"%"'
SOFT FAILED TEST (line 255): "." -> ['',"."]:
    Expected : '\\"\\.\\"\r\n\\"\\.\\"'
    Got      : '"."\r\ntokens [\'"."\']\r\n"."'
SOFT FAILED TEST (line 257): "\\" -> ['',"\\"]:
    Expected : '\\"\\\\\\\\\\"\r\n\\"\\\\\\\\\\"'
    Got      : '"\\\\"\r\ntokens [\'"\\\\\\\\"\']\r\n"\\\\"'
SOFT FAILED TEST (line 259): "|" -> ['',"|"]:
    Expected : '\\"\\|\\"\r\n\\"\\|\\"'
    Got      : '"|"\r\ntokens [\'"|"\']\r\n"|"'
SOFT FAILED TEST (line 263): 1;! -> ['',1]:
    Expected : '1\\;\\!\r\n1'
    Got      : "1;!\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 265): 1;" -> ['',1]:
    Expected : '1\\;\\"\r\n1'
    Got      : '1;"\r\ntokens [\'1\']\r\n1'
SOFT FAILED TEST (line 267): 1;# -> ['',1]:
    Expected : '1\\;\\#\r\n1'
    Got      : "1;#\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 269): 1;$ -> ['',1]:
    Expected : '1\\;\\$\r\n1'
    Got      : "1;$\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 271): 1;% -> ['',1]:
    Expected : '1\\;\\%\r\n1'
    Got      : "1;%\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 273): 1;' -> ['',1]:
    Expected : "1\\;\\'\r\n1"
    Got      : "1;'\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 275): 1;\ -> ['',1]:
    Expected : '1\\;\\\\\r\n1'
    Got      : "1;\\\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 277): 1;\\ -> ['',1]:
    Expected : '1\\;\\\\\\\\\r\n1'
    Got      : "1;\\\\\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 279): 1;\\\ -> ['',1]:
    Expected : '1\\;\\\\\\\\\\\\\r\n1'
    Got      : "1;\\\\\\\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 281): 1;` -> ['',1]:
    Expected : '1\\;\\`\r\n1'
    Got      : "1;`\r\ntokens ['1']\r\n1"
SOFT FAILED TEST (line 288): "!" -> ['',"!"]:
    Expected : '\\"\\!\\"\r\n\\"\\!\\"'
    Got      : '"!"\r\ntokens [\'"!"\']\r\n"!"'

TEST RESULTS (for ../tests/step1_read_print.mal):
   19: soft failing tests
   93: failing tests
    5: passing tests
  117: total tests

Makefile:407: recipe for target 'test^python.3^step1' failed
